#!/bin/bash

# This file is a mess.  It needs major refactoring.  One day, if I have some time...
# -- Hans Deragon (hans@deragon.biz), 2022-09-25 08:14:51 EDT

SCRIPT_NAME="${BASH_SOURCE[0]/*\/}" # Basename, efficient form.
SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
LOGFILE="${SCRIPT_PATH_ABS}/${SCRIPT_NAME}.log"

PACKAGE_DIR="${SCRIPT_PATH_ABS}/packages"

usage()
{
  echo -e "
\e[1;37;42m SAFE \e[0m

Build packages (.deb and .rpm files) for the daemon and client.

Usage:  ${SCRIPT_NAME}

  -d  Dry-run.
  -h  Display this help text.
"
}

run()
{
  if (( DRYRUN )); then
    echo "DRYRUN:  $@"
  else
    $@
  fi
}



# ARGUMENT PARSING
# ════════════════════════════════════════════════════════════════════

DRYRUN=0
while getopts "dh" OPTCMD; do
  case "${OPTCMD}" in
    "d")    DRYRUN=1;;  # Run in dry-run mode.
    "h"|*)  usage; exit 1;;
  esac
done


fpm-installIfAbsent()
{
  if ! which fpm ; then
    cat <<EOM
FPM, the universal package manager is not installed.  Packaging cannot continue without this fabulous tool.

For more information about FPM, check it out at:  https://github.com/jordansissel/fpm

EOM

    read -n 1 -p "Do you agree to install FPM (y/n)? " ANSWER

    if [ "${ANSWER}" == "y" ]; then
      echo -e "\nInstalling FPM.\n"

      # TODO:  The solution here assumes that the OS on which this
      #        script is executed is DEB package based.  It should also
      #        support RPM based OSs.
      sudo apt-get --yes install ruby ruby-dev rubygems build-essential
      sudo gem install --no-document fpm
    else
      echo "Command aborted."
      exit 1
    fi
  fi
}


buildpackage()
{
  local DISTRO_NAME="${1/\/*/}"
  local DISTRO_VERSION="${1/*\//}"
  shift;
  if [ "${DISTRO_VERSION}" == "${DISTRO_NAME}" ]; then
    # No version provided.  Setting to nothing.
    DISTRO_VERSION=""
  else
    # Adding seperator
    DISTRO_VERSION="-${DISTRO_VERSION}"
  fi

  local LOCAL_PACKAGE_DIR="${PACKAGE_DIR}"

  mkdir -p "${LOCAL_PACKAGE_DIR}"
  cd       "${LOCAL_PACKAGE_DIR}"

  #FPM_DEBUG_OPTIONS="--debug-workspace"
  STDOUT="$(set +e; fpm ${FPM_DEBUG_OPTIONS} \
    --force                                  \
    --input-type dir                         \
    --exclude         "DEBIAN"               \
    --version         "${PACKAGE_VERSION}"   \
    --architecture    "${ARCHITECTURE}"      \
    --maintainer      "${MAINTAINER}"        \
    --description     "${DESCRIPTION_LONG}"  \
    --license         "${LICENCE}"           \
    --url             "${URL}"               \
    $@ 2>&1)"

  #echo -e "STDOUT:  ${STDOUT}"
  if (( $? > 0 )); then
    echo -e "ERROR:  ${STDOUT}"
    exit 1
  fi

  FILENAME_ORG="$(echo -e "${STDOUT}" | sed -rn "s/.*:path=>\"(.*?)\.(deb|rpm)\".*/\1.\2/gp")"

  #echo "\${FILENAME}=>>${FILENAME}<<"
  if [ -z "${FILENAME_ORG}" ]; then
    echo "BUG:  \${FILENAME_ORG} is empty.  Aborting."
    exit 1
  fi

  FILENAME="$(echo -e "${STDOUT}" | sed -rn "s/.*:path=>\"(.*?)\.(deb|rpm)\".*/\1-${DISTRO_NAME}${DISTRO_VERSION}.\2/gp")"

  mv "${FILENAME_ORG}" "${FILENAME}"
}


build_daemon_dir() {

  local BUILD_DAEMON_DIR="${GENERATED_DIR}/build-daemon"

  rm -rf "${BUILD_DAEMON_DIR}"
  mkdir -p "${BUILD_DAEMON_DIR}"
  rsync -ar "${BUILD_GENERIC_DIR}/"* "${BUILD_DAEMON_DIR}/." \
    --delete                                                 \
    --exclude '**/init.d/'                                   \
    --exclude '**/glade/'                                    \
    --exclude '**/polkit-1/'                                 \
    --exclude '**/pixmaps/'                                  \
    --exclude '**/autopoweroff.desktop'                      \
    --exclude '**/autopoweroff-gui'                          \
    --exclude 'autopoweroff.rc-status'                       \
    --exclude '**/pam.d/'                                    \
    --exclude '**/etc/security/'                             \
    --exclude '*-uninstall'                                  \
    --prune-empty-dirs

  mv "${BUILD_DAEMON_DIR}/usr/share/doc/autopoweroff"  "${BUILD_DAEMON_DIR}/usr/share/doc/autopoweroff-daemon"
}


build_gui_dir() {

  local BUILD_GUI_DIR="${GENERATED_DIR}/build-gui"

  rm -rf "${BUILD_GUI_DIR}"
  mkdir -p "${BUILD_GUI_DIR}"

  # Removing /etc/autopoweroff because configuration files are provided
  # by the daemon package.
  set -x
  rsync -ar "${BUILD_GENERIC_DIR}/"* "${BUILD_GUI_DIR}/." \
    --delete                                              \
    --exclude '**/systemd/'                               \
    --exclude '**/init.d/'                                \
    --exclude '**/autopoweroffd'                          \
    --exclude '**/etc/autopoweroff'                       \
    --exclude '**/python/modules'                         \
    --exclude '**/*-upgrade'                              \
    --exclude '*-uninstall'                               \
    --prune-empty-dirs

  mv "${BUILD_GUI_DIR}/usr/share/doc/autopoweroff" "${BUILD_GUI_DIR}/usr/share/doc/autopoweroff-gui"
}


list_deb_info()
{
  FILENAME="${1}"

  echo -e "\n\nContent of '${FILENAME}':\n"
  dpkg-deb --contents "${FILENAME}"

  echo -e "\n\nInformation of '${FILENAME}':\n"
  dpkg-deb --info "${FILENAME}"
}


build_daemon_deb_dir()
{
  rm    -rf "${GENERATED_DIR}/build-daemon-deb"
  mkdir  -p "${GENERATED_DIR}/build-daemon-deb"

  rsync -ar              \
    --delete             \
    --exclude "*.redhat" \
    --prune-empty-dirs   \
    "${GENERATED_DIR}/build-daemon/"* "${GENERATED_DIR}/build-daemon-deb"
}


build_ubuntu_20.04()
{
  # Daemon Build
  eval buildpackage                                                                              \
    "ubuntu/20.04"                                                                               \
    --chdir  "${GENERATED_DIR}/build-daemon-deb"                                                 \
    --name    \"${PACKAGE_NAME}-daemon\"                                                         \
    --depends python3                                                                            \
    --depends python3-pyinotify                                                                  \
    --depends python3-psutil                                                                     \
    --deb-systemd  \"${GENERATED_DIR}/build-daemon-deb/etc/systemd/system/autopoweroff.service\" \
    --deb-systemd-enable                                                                         \
    --output-type deb

  list_deb_info "${FILENAME}"

  # GUI Build
  eval buildpackage                       \
    "ubuntu/20.04"                        \
    --chdir  "${GENERATED_DIR}/build-gui" \
    --name    \"${PACKAGE_NAME}-gui\"     \
    --depends \"${PACKAGE_NAME}-daemon\"  \
    --depends python3                     \
    --depends python-gi                   \
    --depends policykit-1                 \
    --output-type deb

  list_deb_info "${FILENAME}"
}

build_ubuntu_22.04()
{
  # Daemon Build
  eval buildpackage                                                                              \
    "ubuntu/22.04"                                                                               \
    --chdir   \"${GENERATED_DIR}/build-daemon-deb\"                                              \
    --name    \"${PACKAGE_NAME}-daemon\"                                                         \
    --depends python3                                                                            \
    --depends python3-pyinotify                                                                  \
    --depends python3-psutil                                                                     \
    --deb-systemd  \"${GENERATED_DIR}/build-daemon-deb/etc/systemd/system/autopoweroff.service\" \
    --deb-systemd-enable                                                                         \
    --output-type deb

  list_deb_info "${FILENAME}"

  # GUI Build
  eval buildpackage                          \
    "ubuntu/22.04"                           \
    --chdir   \"${GENERATED_DIR}/build-gui\" \
    --name    \"${PACKAGE_NAME}-gui\"        \
    --depends \"${PACKAGE_NAME}-daemon\"     \
    --depends python3                        \
    --depends python-gi-dev                  \
    --depends policykit-1                    \
    --output-type deb

  list_deb_info "${FILENAME}"
}

build_popos_22.04()
{
  # Daemon Build
  eval buildpackage                                                                              \
    "popos/22.04"                                                                                \
    --chdir   \"${GENERATED_DIR}/build-daemon-deb\"                                              \
    --name    \"${PACKAGE_NAME}-daemon\"                                                         \
    --depends python3                                                                            \
    --depends python3-pyinotify                                                                  \
    --depends python3-psutil                                                                     \
    --deb-systemd  \"${GENERATED_DIR}/build-daemon-deb/etc/systemd/system/autopoweroff.service\" \
    --deb-systemd-enable                                                                         \
    --output-type deb

  list_deb_info "${FILENAME}"

  # GUI Build
  eval buildpackage                          \
    "popos/22.04"                            \
    --chdir   \"${GENERATED_DIR}/build-gui\" \
    --name    \"${PACKAGE_NAME}-gui\"        \
    --depends \"${PACKAGE_NAME}-daemon\"     \
    --depends python3                        \
    --depends python-gi-dev                  \
    --depends policykit-1                    \
    --output-type deb

  list_deb_info "${FILENAME}"
}


# Build specific deb for Linux Mint 20.3.
# See:  https://github.com/deragon/autopoweroff/issues/32
# List of all version of Linux Mint at:  https://linuxmint.com/download_all.php
build_gui_linuxmint_20.3()
{
  # Daemon Build
  eval buildpackage                                                                              \
    "mint/22.3"                                                                                  \
    --chdir   \"${GENERATED_DIR}/build-daemon-deb\"                                              \
    --name    \"${PACKAGE_NAME}-daemon\"                                                         \
    --depends python3                                                                            \
    --depends python3-pyinotify                                                                  \
    --depends python3-psutil                                                                     \
    --deb-systemd  \"${GENERATED_DIR}/build-daemon-deb/etc/systemd/system/autopoweroff.service\" \
    --deb-systemd-enable                                                                         \
    --output-type deb

  list_deb_info "${FILENAME}"

  # GUI Build
  eval buildpackage                          \
    "mint/20.3"                              \
    --chdir   \"${GENERATED_DIR}/build-gui\" \
    --name    \"${PACKAGE_NAME}-gui\"        \
    --depends \"${PACKAGE_NAME}-daemon\"     \
    --depends python3                        \
    --depends python3-gi                     \
    --depends policykit-1                    \
    --output-type deb

  list_deb_info "${FILENAME}"
}


list_rpm_info()
{
  FILENAME="${1}"
  echo -e "\n\nContent of '${FILENAME}':\n"
  rpm --query --list --package "${FILENAME}"

  set +e  # The RPM command bellow, even successful, exit with code '1'.
          # Thus, need to disable the check.  2021-01-25 on Ubuntu 20.04 LTS.
  echo -e "\n\nInformation of '${FILENAME}':\n"
  rpm --query --info "${FILENAME}"

  echo -e "\nDependencies of '${FILENAME}':\n"
  rpm --query --requires --package "${FILENAME}" | \
    sed 's/^/  /g'  # Indentation added.
  set -e
}


build_daemon_rpm()
{
  rm    -rf "${GENERATED_DIR}/build-daemon-rpm"
  mkdir  -p "${GENERATED_DIR}/build-daemon-rpm"

  rsync -ar            \
    --delete           \
    --prune-empty-dirs \
    "${GENERATED_DIR}/build-daemon/"* "${GENERATED_DIR}/build-daemon-rpm"

# init.d SysV obsolete for RPM.
#  cd "${GENERATED_DIR}/build-daemon-rpm/etc/init.d"
#  mv autopoweroff.redhat autopoweroff
#  cd -

  set -x
  eval buildpackage \
    "fedora" \
    --chdir "${GENERATED_DIR}/build-daemon-rpm" \
    --name \"${PACKAGE_NAME}-daemon\" \
    --depends python3 \
    --depends python-inotify \
    --depends python3-psutil \
    --output-type rpm

  list_rpm_info "${FILENAME}"
}


build_gui_rpm()
{
  eval buildpackage \
    "fedora" \
    --chdir "${GENERATED_DIR}/build-gui" \
    --name \"${PACKAGE_NAME}-gui\" \
    --depends python3 \
    --depends python3-gobject-base \
    --depends gtk3 \
    --depends polkit \
    --depends iputils \
    --output-type rpm

  list_rpm_info "${FILENAME}"
}


# PROCESSING
# ────────────────────────────────────────────────────────────────────────────
{
  rm -rf "${PACKAGE_DIR}"

  SCRIPT_PATH_ABS="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" # Fetch real directory, not symlink.  Spaces are well handled.
  cd "${SCRIPT_PATH_ABS}"

  # Sourcing metadata configuration file generated by the above
  # './configure' command.  If sourcing fails, check for the
  # character " (double quote) in the DESCRIPTION_* variables and remove
  # it.
  run source <(egrep -Ev '^\[' ../etc/autopoweroff/autopoweroff-metadata)

  DESCRIPTION=$(echo -e "${DESCRIPTION_LONG}" | sed ':a;N;$!ba;s/\n/\\n/g;s/"/\\"/g')
  #echo -e "DESCRIPTION=${DESCRIPTION}\n<<<<<"
  MAINTAINER="${COPYRIGHT}"
  VENDOR="${MAINTAINER}"
  LICENCE="${LICENCE}"
  URL="${PROJECT_WEBSITE}"
  ARCHITECTURE="all"

  fpm-installIfAbsent

  set -e
  umask 022
  # Calling configure with --enable-install-for-deb so that the spec file
  # is properly generated.
  echo "======================================================================"
  echo "== builddeb:  ./configure called for setting everything properly"
  #env

  export GENERATED_DIR="${SCRIPT_PATH_ABS}/generated"
  run rm -rf "${GENERATED_DIR}"
  export BUILD_GENERIC_DIR="${GENERATED_DIR}/build-generic"
  run rm -rf "${BUILD_GENERIC_DIR}"
  run rm -f autopoweroff*.deb autopoweroff*.rpm autopoweroff*.tar*

  cd ..

  run aclocal
  run automake
  run autoconf

  run ./configure --enable-install-for-packaging \
                  --prefix="${BUILD_GENERIC_DIR}" \
                  --docdir="${BUILD_GENERIC_DIR}/usr/share/doc/autopoweroff" \
                  --datarootdir="${BUILD_GENERIC_DIR}/usr/share"

  run make dist # Create tarball autopoweroff-<version>.tar.gz
  run make install
  cd -
  run mv ../autopoweroff-*.tar.gz .

  build_daemon_dir
  build_gui_dir

  # RPM building
  build_daemon_rpm
  build_gui_rpm

  # Deb building
  build_daemon_deb_dir
  build_ubuntu_20.04
  build_ubuntu_22.04
  build_popos_22.04
  build_gui_linuxmint_20.3

  cd "${SCRIPT_PATH_ABS}"
  run mv autopoweroff-*.tar.gz packages/.

} 2>&1 | tee "${LOGFILE}"
